[tool.poetry]
name = "opsml"
version = "1.4.8"
description = "A production MLOps tooling framework for python"
authors = ["Thorrester <48217609+thorrester@users.noreply.github.com>"]
readme = "README.md"

classifiers = [
    "Environment :: Web Environment",
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Typing :: Typed",
]

[project.urls]
"Homepage" = "https://github.com/shipt/opsml"

[tool.poetry.dependencies]

# required dependencies
python = ">=3.9,<3.12"
alembic = "^1.10.3"
httpx ="^0.23.3"
matplotlib= ">=3.7.0, <3.8.0"
onnx = ">=1.14.0, <1.15.0"
onnxmltools = "^1.11.1"
onnxruntime = "^1.13.0"
polars = "^0.18.0"
pyarrow = ">=8.0.0"
pydantic = ">=2, <3"
pydantic_settings = "^2"
rich = "^13.3.5"
scikit-learn = ">=1.0"
semver = "^2.13.0"
skl2onnx = "1.14.1"
sqlalchemy = {extras = ["mypy"], version = "^1.4.46"}
tenacity = "^8.2.2"
tf2onnx =">=1.13.0, <1.15.0"
typer = "^0.9.0"
zarr = ">2.12.0"
ydata-profiling-thorrester = "0.0.0"

# mlflow deps (remove this in the future if we create our own ui. mlflow has a good # of deps)
mlflow = ">=2.3.1, <=2.4"

# optional dependencies for sql
psycopg2 = {version="^2.9.6", optional = true}

# optional dependencies for server
fastapi = {version="^0.100.0", optional = true}
gunicorn = {version="^20.1.0", optional = true}
prometheus-fastapi-instrumentator = {version="^5.8.1", optional = true}
rollbar = {version="^0.16.3", optional = true}
uvicorn = {version="^0.20.0", optional = true}
wsgi-basic-auth = {version="^1.1.0", optional = true}
streaming-form-data = {version="^1.11.0", optional = true}

# optional dependencies for gcp
gcsfs = {version="^2023.5.0", optional = true}

# optional dependencies for aws
s3fs = {version="^2023.5.0", optional = true}
boto3 = {version="^1.28", optional = true}

# optional dependencies for cloud-sql
cloud-sql-python-connector = {version="^1.2.0", optional = true}
pg8000 = {version="^1.29.4", optional = true}
pymysql = {version="^1.0.2", optional = true}
rusty-logger = "^0.2.0"

[tool.poetry.extras]
server = ["streaming-form-data", "fastapi", "uvicorn", "rollbar", "gunicorn", "prometheus-fastapi-instrumentator", "wsgi-basic-auth"]
gcp_mysql = ["cloud-sql-python-connector", "pymysql", "gcsfs"]
gcp_postgres = ["cloud-sql-python-connector", "pg8000", "gcsfs"]
s3 = ["s3fs", "boto3"]
gcs = ["gcsfs"]
postgres = ["psycopg2"]
mysql = ["pymysql"]

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
pytest = "^7.1.2"
pytest-lazy-fixture = "^0.6.3"
pytest-cov = "^3.0.0"
coverage = {extras = ["toml"], version = "^6.5.0"}
torch = "<=2.0.0"
torchvision = "^0.15"
#tabulate = "^0.9.0"
lightgbm = "^3.3.3, <4.0.0"
xgboost = "^1.7.1"
transformers = "^4.27.3"
tensorflow = {version="^2.11.0", platform = "linux"}
# Tensorflow < 2.13.0 has no arm64 build in the main pypi package, so this separate one must be used for apple silicon
tensorflow-macos = {version="2.12.0", platform="darwin"}

[tool.poetry.group.dev-lints]
optional = true

[tool.poetry.group.dev-lints.dependencies]
ruff = "^0.0.242"
sqlalchemy-stubs = "^0.4"
types-pymysql = "^1.0.19.1"
types-requests = "^2.28.11.7"
black = "22.3.0"
sqlalchemy2-stubs = "0.0.2a32"
mypy = "^1"
types-protobuf = "^4.21.0.3"
pylint = "^2.17.5"
pylint-pydantic = "^0.2.4"
types-pyyaml = "^6.0.12.12"


[tool.poetry.group.docs.dependencies]
mkdocs-material = "^9.1.7"
mkdocstrings = {extras = ["python"], version = "^0.21.2"}


[tool.poetry.scripts]
opsml-uvicorn-server = 'opsml.app.main:opsml_uvicorn_server'
opsml-gunicorn-server = 'opsml.app.main:opsml_gunicorn_server'
opsml-cli = "opsml.cli.api_cli:app"

[tool.isort]
profile = "black"

[tool.black]
line-length = 120
target-version = ['py310']
include = '\.pyi?$'

[tool.pylint.MASTER]
ignore-paths = [ "opsml/.local_tests/*","opsml/registry/sql/migration/*"]
load-plugins = ["pylint_pydantic", "pylint.extensions.docparams"]

[tool.pylint.messages_control]
max-line-length = 120
disable = [
    "too-few-public-methods",
    "design",
    "duplicate-code",
    "missing-class-docstring",
    "missing-function-docstring",
    "missing-module-docstring",
    "too-many-nested-blocks",
    "unused-argument",
    "fixme",
    "import-outside-toplevel"
]
extension-pkg-whitelist = [
    "pydantic"
]


[tool.flake8]
# This section is just a doc placeholder..see setup.cfg
max-complexity = 10
format = "pylint"
statistics = "True"
max-line-length = 125
# ignore non-PEP8 lints
ignore = ["E203", "W503", "W0511"]

[tool.pytest.ini_options]
log_cli = true
log_cli_level = "INFO"
testpaths = ["tests"]
addopts = "--ignore=tests/test_docs"


[tool.mypy]
# platform configuration
python_version = "3.9"
platform = "linux"
mypy_path = "stubs"
ignore_missing_imports = true
plugins = [
    "numpy.typing.mypy_plugin",
    "pydantic.mypy",
    "sqlalchemy.ext.mypy.plugin",
    "sqlmypy",
]
exclude = ["opsml/.local_tests/*", "opsml/registry/sql/query_helpers.py", "opsml/registry/sql/migration/*"]


[tool.coverage.paths]
source = ["opsml", "*/site-packages"]

[tool.coverage.run]
branch = true
source = ["opsml"]

[tool.coverage.report]
show_missing = true
fail_under = 80


[tool.ruff]
line-length = 120

# Enable Pyflakes `E` and `F` codes by default.
select = ["E", "F"]
ignore = []

# Exclude a variety of commonly ignored directories.
exclude = [
    "tests/",
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "opsml/registry/sql/migration/*",
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.10.
target-version = "py310"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F841","F401","F811"]

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[build-system]
requires = ["poetry-core>=1.2.2"]
build-backend = "poetry.core.masonry.api"

